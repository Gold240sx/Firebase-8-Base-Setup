import { db } from "./FIREBASE/firebase.js"

var data = []

db.collection('employees').onSnapshot(res => {

    res.docChanges().forEach(change => {

        const doc = {
            ...change.doc.data(),
            id: change.doc.id
        }
    
        switch (change.type) {
            case 'added':
              data.push(doc);
              break;
            case 'modified':
              const index = data.findIndex(item => item.id == doc.id);
              data[index] = doc;
              break;
            case 'removed':
              data = data.filter(item => item.id !== doc.id);
              break;
            default:
              break;
        }
    
    })

    console.log(data)
})





// //create svg
// const svg = d3.select('.canvas')
//     .append('svg')
//     .attr('width', 1060)
//     .attr('height', 800)

// // Create graph group
// const graph = svg.append('g')
//     .attr('transform', 'translate(50,50)') // to give a 5opx margin

// //create stratify
// const stratify = d3.stratify()
//     .id(d => d.name)
//     .parentId(d => d.parent)

// // provides a value param to each child node to determine the size of each category
// const rootNode = stratify(data)
//     .sum(d => d.amount)

// // were creating a bubble pack diagram
// // bubble packs generated by the pack d3 function
// const pack = d3.pack()
//     .size([960, 700]) //made up randomly
//     .padding(5) //distance between circles


// //when we join data to shapes we need to join it with an array.
//     //console.log(rootNode) //returns value of stratify data.
//     //console.log(pack(rootNode)) //returns radius, x and y properties.

// //convert the new objects with all their new params back into an array for the cicles to pul data from
//     //console.log(pack(rootNode).descendants()) //returns an array of data for each circle can look at
// const bubbleData = pack(rootNode).descendants();


// //MINDSET NOTES: We dont want to join the data directly to circles. We want to join the data to a selection of group elements.

// // the return value of all of this is an array of nodes we've enetered into the dom/groups. Now we want to add a circle to each group.
// // nodes.append('circle')
// //     .attr('r', d => d.r)
// //     .attr('stroke', 'white')
// //     .attr('stroke-width', 2)
// //     .attr('fill', 'purple')

// // create an ordinal scale
// const colour = d3.scaleOrdinal(['#d1c4e9', '#b39ddb', '#9575cd']);

// // join data and add group for each node
// const nodes = graph.selectAll('g')
//     .data(bubbleData)
//     .enter()
//     .append('g')
//     .attr('transform', d => `translate(${d.x}, ${d.y})`);
//     // returns an array of nodes entered into the DOM (groups)

// //console.log(nodes)

// // add circle to each group
// nodes.append('circle')
//     .attr('r', d => d.r)
//     .attr('stroke', 'white')
//     .attr('stroke-width', 2)
//     .attr('fill', d => colour(d.depth));

// // add text to each group
// nodes.filter(d => !d.children)
//     .append('text')
//     .attr('text-anchor', 'middle')
//     .attr('dy','0.3em')
//     .attr('fill', 'white')
//     .style('font-size', d => (d.value * 5))
//     .text(d => d.data.name);
        
    